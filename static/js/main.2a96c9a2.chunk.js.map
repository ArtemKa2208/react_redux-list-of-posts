{"version":3,"sources":["posts.ts","store/actions.ts","store/selectors.ts","components/posts/Posts.tsx","comments.ts","components/post/Post.tsx","App.tsx","store/index.ts","index.tsx"],"names":["API_POSTS","getPosts","a","fetch","response","json","getPost","postId","LOAD_POSTS","LOAD_POST","SET_POST_ID","LOAD_COMMENTS","SET_SELECTED_POST","loadCommentsAction","payload","type","setSelectedPostAction","getPostsSelector","state","posts","getPostSelector","post","getPostIdSelector","getCommentsSelector","comments","getSelectedPost","selectedPost","Posts","useState","activePost","setActivePost","dispatch","useDispatch","useSelector","useEffect","loadPostsFromServer","postsFromServer","clickHandlerOpen","className","map","title","body","id","onClick","API_COMMENTS_URL","getComments","deleteComment","commentId","method","addComment","comment","JSON","stringify","headers","Post","isCommentsVisible","setIsCommentsVisible","currentInputComment","setCurrentInputComment","currentInputName","setCurrentInputName","currentInputEmail","setCurrentInputEmail","loadPostInfoFromServer","postFromServer","commentsFromServer","handlerDeleteComment","handleInput","event","target","name","value","addNewComment","newComment","email","action","htmlFor","onChange","minLength","length","App","initialState","store","createStore","Root","ReactDOM","render","document","getElementById"],"mappings":"wTAAMA,G,MAAY,4CAEX,SAAeC,IAAtB,+B,4CAAO,4BAAAC,EAAA,sEACkBC,MAAMH,GADxB,cACCI,EADD,yBAGEA,EAASC,QAHX,4C,sBAMA,SAAeC,EAAtB,kC,4CAAO,WAAuBC,GAAvB,eAAAL,EAAA,sEACkBC,MAAM,GAAD,OAAIH,GAAJ,OAAgBO,IADvC,cACCH,EADD,yBAGEA,EAASC,QAHX,4C,sBCRA,IAAMG,EAAa,aACbC,EAAY,YACZC,EAAc,cACdC,EAAgB,gBAChBC,EAAoB,oBAiBpBC,EAAqB,SAACC,GAAD,MAA6B,CAC7DC,KAAMJ,EACNG,YAGWE,EAAwB,SAACF,GAAD,MAA6B,CAChEC,KAAMH,EACNE,YC5BWG,EAAmB,SAACC,GAAD,OAAkBA,EAAMC,OAC3CC,EAAkB,SAACF,GAAD,OAAkBA,EAAMG,MAC1CC,EAAoB,SAACJ,GAAD,OAAkBA,EAAMX,QAC5CgB,EAAsB,SAACL,GAAD,OAAkBA,EAAMM,UAC9CC,EAAkB,SAACP,GAAD,OAAkBA,EAAMQ,c,OCO1CC,EAAkB,WAC7B,MAAoCC,mBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAAWC,cAEXb,EAAQc,YAAYhB,GAE1BiB,qBAAU,WACR,IAAMC,EAAmB,uCAAG,4BAAAjC,EAAA,sEACID,IADJ,OACpBmC,EADoB,OAG1BL,EFf+C,CACnDhB,KAAMP,EACNM,QEa6BsB,IAHC,2CAAH,qDAMzBD,MACC,IAEH,IAAME,EAAmB,SAAC9B,GACxBuB,EAAcvB,GACdwB,EFbiD,CACnDhB,KAAML,EACNI,QEW2BP,IACzBwB,EAASf,EAAsBT,KASjC,OACE,qBAAK+B,UAAU,QAAf,SACE,oBAAIA,UAAU,cAAd,SACGnB,EAAMoB,KAAI,SAAClB,GAAD,OACT,qBAAIiB,UAAU,cAAd,UACE,mBAAGA,UAAU,eAAb,SAA6BjB,EAAKmB,QAClC,mBAAGF,UAAU,cAAb,SAA4BjB,EAAKoB,OAE9BpB,EAAKqB,KAAOb,EAET,wBACES,UAAU,qCACVvB,KAAK,SACL4B,QAAS,kBAlBzBb,EAAc,QAEdC,EAASf,EAAsB,QAajB,mBASA,wBACEsB,UAAU,qCACVvB,KAAK,SACL4B,QAAS,kBAAMN,EAAiBhB,EAAKqB,KAHvC,oBAfyBrB,EAAKqB,YC3C1CE,G,MAAmB,8CAElB,SAAeC,EAAtB,kC,4CAAO,WAA2BtC,GAA3B,eAAAL,EAAA,sEACkBC,MAAM,GAAD,OAAIyC,EAAJ,mBAA+BrC,IADtD,cACCH,EADD,yBAGEA,EAASC,QAHX,4C,sBAMA,SAAeyC,EAAtB,kC,4CAAO,WAA6BC,GAA7B,SAAA7C,EAAA,sEACCC,MAAM,GAAD,OAAIyC,EAAJ,YAAwBG,GAAa,CAC9CC,OAAQ,WAFL,4C,sBAMA,SAAeC,EAAtB,kC,4CAAO,WAA0BC,GAA1B,eAAAhD,EAAA,sEACkBC,MAAMyC,EAAkB,CAC7CI,OAAQ,OACRP,KAAMU,KAAKC,UAAUF,GACrBG,QAAS,CACP,eAAgB,sBALf,cACCjD,EADD,yBASEA,EAASC,QATX,4C,sBCDA,IAAMiD,EAAiB,WAC5B,MAAkD1B,oBAAS,GAA3D,mBAAO2B,EAAP,KAA0BC,EAA1B,KACA,EAAsD5B,mBAAS,IAA/D,mBAAO6B,EAAP,KAA4BC,EAA5B,KACA,EAAgD9B,mBAAS,IAAzD,mBAAO+B,EAAP,KAAyBC,EAAzB,KACA,EAAkDhC,mBAAS,IAA3D,mBAAOiC,EAAP,KAA0BC,EAA1B,KACM/B,EAAWC,cAEXX,EAAOY,YAAYb,GACnBI,EAAWS,YAAYV,GACvBhB,EAAS0B,YAAYX,GACrBI,EAAeO,YAAYR,GAEjCS,qBAAU,WACR,IAAM6B,EAAsB,uCAAG,8BAAA7D,EAAA,sEACAI,EAAQC,GADR,cACvByD,EADuB,gBAEInB,EAAYtC,GAFhB,OAEvB0D,EAFuB,OAI7BlC,EAASlB,EAAmBoD,IAC5BlC,EJpB4C,CAChDhB,KAAMN,EACNK,QIkB4BkD,IALK,2CAAH,qDAQxBzD,GACFwD,MAED,CAACxD,IAEJ,IAIM2D,EAAoB,uCAAG,WAAOnB,GAAP,eAAA7C,EAAA,sEACrB4C,EAAcC,GADO,uBAEMF,EAAYtC,GAFlB,OAErB0D,EAFqB,OAI3BlC,EAASlB,EAAmBoD,IAJD,2CAAH,sDAOpBE,EAAc,SAACC,GACnB,OAAQA,EAAMC,OAAOC,MACnB,IAAK,OACHV,EAAoBQ,EAAMC,OAAOE,OACjC,MACF,IAAK,QACHT,EAAqBM,EAAMC,OAAOE,OAClC,MACF,IAAK,UACHb,EAAuBU,EAAMC,OAAOE,SAMpCC,EAAa,uCAAG,8BAAAtE,EAAA,6DACduE,EAAa,CACjBlE,SACA+D,KAAMX,EACNe,MAAOb,EACPpB,KAAMgB,GALY,SAQdR,EAAWwB,GARG,uBASa5B,EAAYtC,GATzB,OASd0D,EATc,OAWpBlC,EAASlB,EAAmBoD,IAE5BL,EAAoB,IACpBE,EAAqB,IACrBJ,EAAuB,IAfH,4CAAH,qDAkBnB,OACE,qBAAKpB,UAAU,OAAf,SAEIZ,EACE,gCACE,oBAAIY,UAAU,cAAd,2BACA,mBAAGA,UAAU,aAAb,gBAA2BjB,QAA3B,IAA2BA,OAA3B,EAA2BA,EAAMmB,QACjC,yCACA,mCAAInB,QAAJ,IAAIA,OAAJ,EAAIA,EAAMoB,OACV,mBAAGH,UAAU,oBAAb,yBACA,uBAAMA,UAAU,aAAaqC,OAAO,GAApC,UACE,wBACEC,QAAQ,OACRtC,UAAU,oBAFZ,iBAKE,uBACEA,UAAU,2CACVgC,KAAK,OACLvD,KAAK,OACL8D,SAAUV,EACVI,MAAOZ,EACPmB,UAAW,OAGf,wBACExC,UAAU,oBACVsC,QAAQ,QAFV,kBAKE,uBACEtC,UAAU,2CACVgC,KAAK,QACLvD,KAAK,QACL8D,SAAUV,EACVI,MAAOV,OAGX,wBACEvB,UAAU,oBACVsC,QAAQ,UAFV,oBAKE,uBACEtC,UAAU,2CACVgC,KAAK,UACLvD,KAAK,OACL8D,SAAUV,EACVI,MAAOd,EACPqB,UAAW,OAGf,wBACE/D,KAAK,SACL4B,QAAS6B,EACTlC,UAAU,6CAHZ,4BAQF,uBACA,wBACEvB,KAAK,SACL4B,QA3GiB,WAC3Ba,GAAsBD,IAwGd,SAIGA,EAAoB,gBAAkB,kBAExCA,IACC/B,EAASuD,OACPvD,EAASe,KAAI,SAACW,GAAD,OACX,oBAAGZ,UAAU,gBAAb,UACE,mBAAGA,UAAU,sBAAb,SAAoCY,EAAQoB,OAC5C,sBAAKhC,UAAU,yBAAf,UACE,4BAAIY,EAAQT,OACZ,wBACEH,UAAU,wBACVvB,KAAK,SACL4B,QAAS,kBAAMuB,EAAqBhB,EAAQR,KAH9C,oBAJ8BQ,EAAQR,OAe5C,uDAKN,mBAAGJ,UAAU,kBAAb,qCCxKG0C,EAAgB,WAC3B,OACE,sBAAK1C,UAAU,OAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,Q,uBCAA2C,EAAuB,CAC3B9D,MAAO,GACPE,KAAM,KACNd,OAAQ,EACRiB,SAAU,GACVE,aAAc,MAmCHwD,EAAQC,aAhCL,WAA2C,IAA1CjE,EAAyC,uDAAjC+D,EAAcN,EAAmB,uCACxD,OAAQA,EAAO5D,MACb,KAAKP,EACH,OAAO,2BACFU,GADL,IAEEC,MAAM,YAAKwD,EAAO7D,WAEtB,KAAKL,EACH,OAAO,2BACFS,GADL,IAEEG,KAAK,eAAMsD,EAAO7D,WAEtB,KAAKJ,EACH,OAAO,2BACFQ,GADL,IAEEX,OAAQoE,EAAO7D,UAEnB,KAAKH,EACH,OAAO,2BACFO,GADL,IAEEM,SAAS,YAAKmD,EAAO7D,WAEzB,KAAKF,EACH,OAAO,2BACFM,GADL,IAEEQ,aAAciD,EAAO7D,UAEzB,QACE,OAAOI,MCvCPkE,EAAO,kBACX,cAAC,IAAD,CAAUF,MAAOA,EAAjB,SACE,cAAC,EAAD,OAIJG,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.2a96c9a2.chunk.js","sourcesContent":["const API_POSTS = 'https://mate.academy/students-api/posts/';\n\nexport async function getPosts() {\n  const response = await fetch(API_POSTS);\n\n  return response.json();\n}\n\nexport async function getPost(postId: number) {\n  const response = await fetch(`${API_POSTS}${postId}`);\n\n  return response.json();\n}\n","export const LOAD_POSTS = 'LOAD_POSTS';\nexport const LOAD_POST = 'LOAD_POST';\nexport const SET_POST_ID = 'SET_POST_ID';\nexport const LOAD_COMMENTS = 'LOAD_COMMENTS';\nexport const SET_SELECTED_POST = 'SET_SELECTED_POST';\n\nexport const loadPostsAction = (payload: Post[]) => ({\n  type: LOAD_POSTS,\n  payload,\n});\n\nexport const loadPostAction = (payload: Post) => ({\n  type: LOAD_POST,\n  payload,\n});\n\nexport const setPostIdAction = (payload: number) => ({\n  type: SET_POST_ID,\n  payload,\n});\n\nexport const loadCommentsAction = (payload: CommentType[]) => ({\n  type: LOAD_COMMENTS,\n  payload,\n});\n\nexport const setSelectedPostAction = (payload: number | null) => ({\n  type: SET_SELECTED_POST,\n  payload,\n});\n","export const getPostsSelector = (state: State) => state.posts;\nexport const getPostSelector = (state: State) => state.post;\nexport const getPostIdSelector = (state: State) => state.postId;\nexport const getCommentsSelector = (state: State) => state.comments;\nexport const getSelectedPost = (state: State) => state.selectedPost;\n","import React, { useEffect, useState } from 'react';\nimport './Posts.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getPosts } from '../../posts';\nimport {\n  loadPostsAction,\n  setPostIdAction,\n  setSelectedPostAction,\n} from '../../store/actions';\nimport { getPostsSelector } from '../../store/selectors';\n\nexport const Posts: React.FC = () => {\n  const [activePost, setActivePost] = useState(0);\n  const dispatch = useDispatch();\n\n  const posts = useSelector(getPostsSelector);\n\n  useEffect(() => {\n    const loadPostsFromServer = async () => {\n      const postsFromServer = await getPosts();\n\n      dispatch(loadPostsAction(postsFromServer));\n    };\n\n    loadPostsFromServer();\n  }, []);\n\n  const clickHandlerOpen = (postId: number) => {\n    setActivePost(postId);\n    dispatch(setPostIdAction(postId));\n    dispatch(setSelectedPostAction(postId));\n  };\n\n  const clickHandlerClose = () => {\n    setActivePost(0);\n    // dispatch(setPostIdAction(0));\n    dispatch(setSelectedPostAction(null));\n  };\n\n  return (\n    <div className=\"posts\">\n      <ul className=\"posts__list\">\n        {posts.map((post) => (\n          <li className=\"posts__item\" key={post.id}>\n            <p className=\"posts__title\">{post.title}</p>\n            <p className=\"posts__body\">{post.body}</p>\n            {\n              (post.id === activePost)\n                ? (\n                  <button\n                    className=\"posts__button button small is-info\"\n                    type=\"button\"\n                    onClick={() => clickHandlerClose()}\n                  >\n                    Close\n                  </button>\n                )\n                : (\n                  <button\n                    className=\"posts__button button small is-dark\"\n                    type=\"button\"\n                    onClick={() => clickHandlerOpen(post.id)}\n                  >\n                    Open\n                  </button>\n                )\n            }\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","const API_COMMENTS_URL = 'https://mate.academy/students-api/comments';\n\nexport async function getComments(postId:number) {\n  const response = await fetch(`${API_COMMENTS_URL}?postId=${postId}`);\n\n  return response.json();\n}\n\nexport async function deleteComment(commentId:number) {\n  await fetch(`${API_COMMENTS_URL}/${commentId}`, {\n    method: 'DELETE',\n  });\n}\n\nexport async function addComment(comment: newComment) {\n  const response = await fetch(API_COMMENTS_URL, {\n    method: 'POST',\n    body: JSON.stringify(comment),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  return response.json();\n}\n","import React, { useEffect, useState } from 'react';\nimport './Post.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadCommentsAction, loadPostAction } from '../../store/actions';\nimport {\n  getCommentsSelector,\n  getPostIdSelector,\n  getPostSelector,\n  getSelectedPost,\n} from '../../store/selectors';\nimport { getPost } from '../../posts';\nimport { addComment, deleteComment, getComments } from '../../comments';\n\nexport const Post: React.FC = () => {\n  const [isCommentsVisible, setIsCommentsVisible] = useState(false);\n  const [currentInputComment, setCurrentInputComment] = useState('');\n  const [currentInputName, setCurrentInputName] = useState('');\n  const [currentInputEmail, setCurrentInputEmail] = useState('');\n  const dispatch = useDispatch();\n\n  const post = useSelector(getPostSelector);\n  const comments = useSelector(getCommentsSelector);\n  const postId = useSelector(getPostIdSelector);\n  const selectedPost = useSelector(getSelectedPost);\n\n  useEffect(() => {\n    const loadPostInfoFromServer = async () => {\n      const postFromServer = await getPost(postId);\n      const commentsFromServer = await getComments(postId);\n\n      dispatch(loadCommentsAction(commentsFromServer));\n      dispatch(loadPostAction(postFromServer));\n    };\n\n    if (postId) {\n      loadPostInfoFromServer();\n    }\n  }, [postId]);\n\n  const changeCommentsStatus = () => {\n    setIsCommentsVisible(!isCommentsVisible);\n  };\n\n  const handlerDeleteComment = async (commentId: number) => {\n    await deleteComment(commentId);\n    const commentsFromServer = await getComments(postId);\n\n    dispatch(loadCommentsAction(commentsFromServer));\n  };\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    switch (event.target.name) {\n      case 'name':\n        setCurrentInputName(event.target.value);\n        break;\n      case 'email':\n        setCurrentInputEmail(event.target.value);\n        break;\n      case 'comment':\n        setCurrentInputComment(event.target.value);\n        break;\n      default:\n    }\n  };\n\n  const addNewComment = async () => {\n    const newComment = {\n      postId,\n      name: currentInputName,\n      email: currentInputEmail,\n      body: currentInputComment,\n    };\n\n    await addComment(newComment);\n    const commentsFromServer = await getComments(postId);\n\n    dispatch(loadCommentsAction(commentsFromServer));\n\n    setCurrentInputName('');\n    setCurrentInputEmail('');\n    setCurrentInputComment('');\n  };\n\n  return (\n    <div className=\"post\">\n      {\n        selectedPost ? (\n          <div>\n            <h1 className=\"post__title\">Selected post</h1>\n            <p className=\"post__name\">{post?.title}</p>\n            <b>Content:</b>\n            <p>{post?.body}</p>\n            <p className=\"post__add-comment\">Add comment</p>\n            <form className=\"post__form\" action=\"\">\n              <label\n                htmlFor=\"name\"\n                className=\"post__form__label\"\n              >\n                Name\n                <input\n                  className=\"input is-link is-small post__form__input\"\n                  name=\"name\"\n                  type=\"text\"\n                  onChange={handleInput}\n                  value={currentInputName}\n                  minLength={2}\n                />\n              </label>\n              <label\n                className=\"post__form__label\"\n                htmlFor=\"email\"\n              >\n                Email\n                <input\n                  className=\"input is-link is-small post__form__input\"\n                  name=\"email\"\n                  type=\"email\"\n                  onChange={handleInput}\n                  value={currentInputEmail}\n                />\n              </label>\n              <label\n                className=\"post__form__label\"\n                htmlFor=\"comment\"\n              >\n                Comment\n                <input\n                  className=\"input is-link is-small post__form__input\"\n                  name=\"comment\"\n                  type=\"text\"\n                  onChange={handleInput}\n                  value={currentInputComment}\n                  minLength={2}\n                />\n              </label>\n              <button\n                type=\"button\"\n                onClick={addNewComment}\n                className=\"button is-dark is-small post__form__button\"\n              >\n                Add comment\n              </button>\n            </form>\n            <br />\n            <button\n              type=\"button\"\n              onClick={changeCommentsStatus}\n            >\n              {isCommentsVisible ? 'Hide comments' : 'Show comments'}\n            </button>\n            {isCommentsVisible && (\n              comments.length ? (\n                comments.map((comment) => (\n                  <p className=\"post__comment\" key={comment.id}>\n                    <p className=\"post__comment__name\">{comment.name}</p>\n                    <div className=\"post__comment__content\">\n                      <p>{comment.body}</p>\n                      <button\n                        className=\"post__comment__button\"\n                        type=\"button\"\n                        onClick={() => handlerDeleteComment(comment.id)}\n                      >\n                        x\n                      </button>\n                    </div>\n                  </p>\n                ))\n              ) : (\n                <p>Comments not found</p>\n              )\n            )}\n          </div>\n        ) : (\n          <p className=\"post__not-found\">Post is not selected</p>\n        )\n      }\n\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { Posts } from './components/posts/Posts';\nimport { Post } from './components/post/Post';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"main\">\n      <Posts />\n      <Post />\n    </div>\n  );\n};\n","import { createStore } from 'redux';\nimport {\n  LOAD_COMMENTS,\n  LOAD_POST,\n  LOAD_POSTS,\n  SET_POST_ID,\n  SET_SELECTED_POST,\n} from './actions';\n\nconst initialState : State = {\n  posts: [],\n  post: null,\n  postId: 0,\n  comments: [],\n  selectedPost: null,\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case LOAD_POSTS:\n      return {\n        ...state,\n        posts: [...action.payload],\n      };\n    case LOAD_POST:\n      return {\n        ...state,\n        post: { ...action.payload },\n      };\n    case SET_POST_ID:\n      return {\n        ...state,\n        postId: action.payload,\n      };\n    case LOAD_COMMENTS:\n      return {\n        ...state,\n        comments: [...action.payload],\n      };\n    case SET_SELECTED_POST:\n      return {\n        ...state,\n        selectedPost: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","import ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport { store } from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}